services:
  client:
    image: mattlangsenkamp/classificationclient:dev
    ports:
      - "5173:5173"
    depends_on:
      - server
    networks:
      - static-network
  server:
    image: mattlangsenkamp/scalamachinelearningdeployment:latest
    ports:
      - "8080:8080"
    depends_on:
      - grpctriton
    environment:
      - SERVER_HOST=0.0.0.0
      - TRITON_HOST=grpctriton
      - KEY=${GITHUB_CLIENT_KEY}
      - SECRET=${GITHUB_CLIENT_SECRET}
      - LABELS_DIR=/labels.json
    networks:
      - static-network
  grpctriton:
    image: mattlangsenkamp/tritondeployment:cpu
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    networks:
      - static-network
  otel-collector:
    image: otel/opentelemetry-collector-contrib
    command: [ --config=/etc/otel-collector-config.yaml ]
    volumes:
      - "./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml"
    ports:
      - "8888:8888" # Prometheus metrics exposed by the collector
      - "8889:8889" # Prometheus exporter metrics
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
    depends_on:
      - server
      - jaeger
      - prometheus
    networks:
      - static-network
  jaeger:
    # stores traces received from the OpenTelemetry Collector 
    image: jaegertracing/all-in-one:latest
    volumes:
      - "./config/jaeger-ui.json:/etc/jaeger/jaeger-ui.json"
    command: --query.ui-config /etc/jaeger/jaeger-ui.json
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    ports:
      - "14250:14250"
      - "16685:16685" # GRPC
      - "16686:16686" # UI
    networks:
      - static-network
  prometheus:
    # scrapes metrics from the OpenTelemetry Collector
    image: prom/prometheus:latest
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - static-network
networks:
  static-network:
